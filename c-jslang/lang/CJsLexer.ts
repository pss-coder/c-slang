// Generated from ./lang/CJs.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CJsLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly T__17 = 18;
	public static readonly T__18 = 19;
	public static readonly T__19 = 20;
	public static readonly T__20 = 21;
	public static readonly CHAR = 22;
	public static readonly STRING = 23;
	public static readonly WS = 24;
	public static readonly ADD = 25;
	public static readonly SUB = 26;
	public static readonly MUL = 27;
	public static readonly DIV = 28;
	public static readonly MOD = 29;
	public static readonly ARRAY = 30;
	public static readonly COMMA = 31;
	public static readonly PRINT = 32;
	public static readonly COLON = 33;
	public static readonly EQ = 34;
	public static readonly AND = 35;
	public static readonly OR = 36;
	public static readonly NOT = 37;
	public static readonly LPAREN = 38;
	public static readonly RPAREN = 39;
	public static readonly LCURLY = 40;
	public static readonly RCURLY = 41;
	public static readonly INT = 42;
	public static readonly ID = 43;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "CHAR", "STRING", "WS", "ADD", "SUB", 
		"MUL", "DIV", "MOD", "ARRAY", "COMMA", "PRINT", "COLON", "EQ", "AND", 
		"OR", "NOT", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "INT", "ID",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'return'", "'struct'", "'while'", "'if'", "'else'", "'++'", 
		"'--'", "'&'", "'=='", "'<'", "'>'", "'>='", "'<='", "'void'", "'int'", 
		"'char'", "'void*'", "'int*'", "'char*'", "'['", "']'", undefined, undefined, 
		undefined, "'+'", "'-'", "'*'", "'/'", "'%'", "'[]'", "','", "'print'", 
		"';'", "'='", "'&&'", "'||'", "'!'", "'('", "')'", "'{'", "'}'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, "CHAR", "STRING", "WS", "ADD", "SUB", "MUL", "DIV", "MOD", 
		"ARRAY", "COMMA", "PRINT", "COLON", "EQ", "AND", "OR", "NOT", "LPAREN", 
		"RPAREN", "LCURLY", "RCURLY", "INT", "ID",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CJsLexer._LITERAL_NAMES, CJsLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CJsLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CJsLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "CJs.g4"; }

	// @Override
	public get ruleNames(): string[] { return CJsLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CJsLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CJsLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CJsLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02-\xFB\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\t\x03" +
		"\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10" +
		"\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12" +
		"\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16" +
		"\x03\x16\x03\x17\x03\x17\x07\x17\xB0\n\x17\f\x17\x0E\x17\xB3\v\x17\x03" +
		"\x17\x03\x17\x03\x18\x03\x18\x07\x18\xB9\n\x18\f\x18\x0E\x18\xBC\v\x18" +
		"\x03\x18\x03\x18\x03\x19\x06\x19\xC1\n\x19\r\x19\x0E\x19\xC2\x03\x19\x03" +
		"\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03" +
		"\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03!\x03!\x03" +
		"!\x03!\x03\"\x03\"\x03#\x03#\x03$\x03$\x03$\x03%\x03%\x03%\x03&\x03&\x03" +
		"\'\x03\'\x03(\x03(\x03)\x03)\x03*\x03*\x03+\x06+\xF1\n+\r+\x0E+\xF2\x03" +
		",\x03,\x07,\xF7\n,\f,\x0E,\xFA\v,\x03\xB1\x02\x02-\x03\x02\x03\x05\x02" +
		"\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02" +
		"\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11" +
		"!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02" +
		"\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02" +
		"!A\x02\"C\x02#E\x02$G\x02%I\x02&K\x02\'M\x02(O\x02)Q\x02*S\x02+U\x02," +
		"W\x02-\x03\x02\x06\x05\x02\v\f\x0F\x0F\"\"\x03\x022;\x05\x02C\\aac|\x06" +
		"\x022;C\\aac|\x02\xFF\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02" +
		"\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02" +
		"\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02" +
		"\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02" +
		"\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02" +
		"\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03" +
		"\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02" +
		"\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x02" +
		"3\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02" +
		"\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02" +
		"\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03" +
		"\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02" +
		"\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02" +
		"U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x03Y\x03\x02\x02\x02\x05`\x03\x02" +
		"\x02\x02\x07g\x03\x02\x02\x02\tm\x03\x02\x02\x02\vp\x03\x02\x02\x02\r" +
		"u\x03\x02\x02\x02\x0Fx\x03\x02\x02\x02\x11{\x03\x02\x02\x02\x13}\x03\x02" +
		"\x02\x02\x15\x80\x03\x02\x02\x02\x17\x82\x03\x02\x02\x02\x19\x84\x03\x02" +
		"\x02\x02\x1B\x87\x03\x02\x02\x02\x1D\x8A\x03\x02\x02\x02\x1F\x8F\x03\x02" +
		"\x02\x02!\x93\x03\x02\x02\x02#\x98\x03\x02\x02\x02%\x9E\x03\x02\x02\x02" +
		"\'\xA3\x03\x02\x02\x02)\xA9\x03\x02\x02\x02+\xAB\x03\x02\x02\x02-\xAD" +
		"\x03\x02\x02\x02/\xB6\x03\x02\x02\x021\xC0\x03\x02\x02\x023\xC6\x03\x02" +
		"\x02\x025\xC8\x03\x02\x02\x027\xCA\x03\x02\x02\x029\xCC\x03\x02\x02\x02" +
		";\xCE\x03\x02\x02\x02=\xD0\x03\x02\x02\x02?\xD3\x03\x02\x02\x02A\xD5\x03" +
		"\x02\x02\x02C\xDB\x03\x02\x02\x02E\xDD\x03\x02\x02\x02G\xDF\x03\x02\x02" +
		"\x02I\xE2\x03\x02\x02\x02K\xE5\x03\x02\x02\x02M\xE7\x03\x02\x02\x02O\xE9" +
		"\x03\x02\x02\x02Q\xEB\x03\x02\x02\x02S\xED\x03\x02\x02\x02U\xF0\x03\x02" +
		"\x02\x02W\xF4\x03\x02\x02\x02YZ\x07t\x02\x02Z[\x07g\x02\x02[\\\x07v\x02" +
		"\x02\\]\x07w\x02\x02]^\x07t\x02\x02^_\x07p\x02\x02_\x04\x03\x02\x02\x02" +
		"`a\x07u\x02\x02ab\x07v\x02\x02bc\x07t\x02\x02cd\x07w\x02\x02de\x07e\x02" +
		"\x02ef\x07v\x02\x02f\x06\x03\x02\x02\x02gh\x07y\x02\x02hi\x07j\x02\x02" +
		"ij\x07k\x02\x02jk\x07n\x02\x02kl\x07g\x02\x02l\b\x03\x02\x02\x02mn\x07" +
		"k\x02\x02no\x07h\x02\x02o\n\x03\x02\x02\x02pq\x07g\x02\x02qr\x07n\x02" +
		"\x02rs\x07u\x02\x02st\x07g\x02\x02t\f\x03\x02\x02\x02uv\x07-\x02\x02v" +
		"w\x07-\x02\x02w\x0E\x03\x02\x02\x02xy\x07/\x02\x02yz\x07/\x02\x02z\x10" +
		"\x03\x02\x02\x02{|\x07(\x02\x02|\x12\x03\x02\x02\x02}~\x07?\x02\x02~\x7F" +
		"\x07?\x02\x02\x7F\x14\x03\x02\x02\x02\x80\x81\x07>\x02\x02\x81\x16\x03" +
		"\x02\x02\x02\x82\x83\x07@\x02\x02\x83\x18\x03\x02\x02\x02\x84\x85\x07" +
		"@\x02\x02\x85\x86\x07?\x02\x02\x86\x1A\x03\x02\x02\x02\x87\x88\x07>\x02" +
		"\x02\x88\x89\x07?\x02\x02\x89\x1C\x03\x02\x02\x02\x8A\x8B\x07x\x02\x02" +
		"\x8B\x8C\x07q\x02\x02\x8C\x8D\x07k\x02\x02\x8D\x8E\x07f\x02\x02\x8E\x1E" +
		"\x03\x02\x02\x02\x8F\x90\x07k\x02\x02\x90\x91\x07p\x02\x02\x91\x92\x07" +
		"v\x02\x02\x92 \x03\x02\x02\x02\x93\x94\x07e\x02\x02\x94\x95\x07j\x02\x02" +
		"\x95\x96\x07c\x02\x02\x96\x97\x07t\x02\x02\x97\"\x03\x02\x02\x02\x98\x99" +
		"\x07x\x02\x02\x99\x9A\x07q\x02\x02\x9A\x9B\x07k\x02\x02\x9B\x9C\x07f\x02" +
		"\x02\x9C\x9D\x07,\x02\x02\x9D$\x03\x02\x02\x02\x9E\x9F\x07k\x02\x02\x9F" +
		"\xA0\x07p\x02\x02\xA0\xA1\x07v\x02\x02\xA1\xA2\x07,\x02\x02\xA2&\x03\x02" +
		"\x02\x02\xA3\xA4\x07e\x02\x02\xA4\xA5\x07j\x02\x02\xA5\xA6\x07c\x02\x02" +
		"\xA6\xA7\x07t\x02\x02\xA7\xA8\x07,\x02\x02\xA8(\x03\x02\x02\x02\xA9\xAA" +
		"\x07]\x02\x02\xAA*\x03\x02\x02\x02\xAB\xAC\x07_\x02\x02\xAC,\x03\x02\x02" +
		"\x02\xAD\xB1\x07)\x02\x02\xAE\xB0\v\x02\x02\x02\xAF\xAE\x03\x02\x02\x02" +
		"\xB0\xB3\x03\x02\x02\x02\xB1\xB2\x03\x02\x02\x02\xB1\xAF\x03\x02\x02\x02" +
		"\xB2\xB4\x03\x02\x02\x02\xB3\xB1\x03\x02\x02\x02\xB4\xB5\x07)\x02\x02" +
		"\xB5.\x03\x02\x02\x02\xB6\xBA\x07$\x02\x02\xB7\xB9\x04\"\x80\x02\xB8\xB7" +
		"\x03\x02\x02\x02\xB9\xBC\x03\x02\x02\x02\xBA\xB8\x03\x02\x02\x02\xBA\xBB" +
		"\x03\x02\x02\x02\xBB\xBD\x03\x02\x02\x02\xBC\xBA\x03\x02\x02\x02\xBD\xBE" +
		"\x07$\x02\x02\xBE0\x03\x02\x02\x02\xBF\xC1\t\x02\x02\x02\xC0\xBF\x03\x02" +
		"\x02\x02\xC1\xC2\x03\x02\x02\x02\xC2\xC0\x03\x02\x02\x02\xC2\xC3\x03\x02" +
		"\x02\x02\xC3\xC4\x03\x02\x02\x02\xC4\xC5\b\x19\x02\x02\xC52\x03\x02\x02" +
		"\x02\xC6\xC7\x07-\x02\x02\xC74\x03\x02\x02\x02\xC8\xC9\x07/\x02\x02\xC9" +
		"6\x03\x02\x02\x02\xCA\xCB\x07,\x02\x02\xCB8\x03\x02\x02\x02\xCC\xCD\x07" +
		"1\x02\x02\xCD:\x03\x02\x02\x02\xCE\xCF\x07\'\x02\x02\xCF<\x03\x02\x02" +
		"\x02\xD0\xD1\x07]\x02\x02\xD1\xD2\x07_\x02\x02\xD2>\x03\x02\x02\x02\xD3" +
		"\xD4\x07.\x02\x02\xD4@\x03\x02\x02\x02\xD5\xD6\x07r\x02\x02\xD6\xD7\x07" +
		"t\x02\x02\xD7\xD8\x07k\x02\x02\xD8\xD9\x07p\x02\x02\xD9\xDA\x07v\x02\x02" +
		"\xDAB\x03\x02\x02\x02\xDB\xDC\x07=\x02\x02\xDCD\x03\x02\x02\x02\xDD\xDE" +
		"\x07?\x02\x02\xDEF\x03\x02\x02\x02\xDF\xE0\x07(\x02\x02\xE0\xE1\x07(\x02" +
		"\x02\xE1H\x03\x02\x02\x02\xE2\xE3\x07~\x02\x02\xE3\xE4\x07~\x02\x02\xE4" +
		"J\x03\x02\x02\x02\xE5\xE6\x07#\x02\x02\xE6L\x03\x02\x02\x02\xE7\xE8\x07" +
		"*\x02\x02\xE8N\x03\x02\x02\x02\xE9\xEA\x07+\x02\x02\xEAP\x03\x02\x02\x02" +
		"\xEB\xEC\x07}\x02\x02\xECR\x03\x02\x02\x02\xED\xEE\x07\x7F\x02\x02\xEE" +
		"T\x03\x02\x02\x02\xEF\xF1\t\x03\x02\x02\xF0\xEF\x03\x02\x02\x02\xF1\xF2" +
		"\x03\x02\x02\x02\xF2\xF0\x03\x02\x02\x02\xF2\xF3\x03\x02\x02\x02\xF3V" +
		"\x03\x02\x02\x02\xF4\xF8\t\x04\x02\x02\xF5\xF7\t\x05\x02\x02\xF6\xF5\x03" +
		"\x02\x02\x02\xF7\xFA\x03\x02\x02\x02\xF8\xF6\x03\x02\x02\x02\xF8\xF9\x03" +
		"\x02\x02\x02\xF9X\x03\x02\x02\x02\xFA\xF8\x03\x02\x02\x02\b\x02\xB1\xBA" +
		"\xC2\xF2\xF8\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CJsLexer.__ATN) {
			CJsLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CJsLexer._serializedATN));
		}

		return CJsLexer.__ATN;
	}

}

